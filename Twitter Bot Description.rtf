{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh12200\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 For my Twitter Bot, I sought to create a bot that tweets the weather of a given location (I chose Stony Brook). However, I chose to tweet with Ollie Williams as a guest, a character from the popular TV show Family Guy. In the show, Ollie is a meteorologist who is known for his very short weather reports\'97 in which he also screams the report to the viewers. To get the weather information, I knew I had to get the data from an outside source. After some research, I learned that using the DarkSky API was my best bet. DarkSky is a weather forecasting service that focuses on delivering precise weather forecasts. Their service offers a wide range of information about the weather forecast almost anywhere on the planet. In order to access the information, you just have to put in the desired latitude and longitude. But before I could access DarkSky, I needed to create a developer account. The process was very straightforward and soon I had my own developer account. With it, I could make requests to the DarkSky API and get the data for the weather. DarkSky allows for 1,000 free API calls per day, and charges a small amount for every call after that. I had to use the builtin requests library to access the API data. I converted the API to a json file so that it would be easier to read. There was a plethora of data in the json file, but I chose to focus on the \'93currently\'94 section. This section contained information such as a summary of the current weather conditions, the current temperature, precipitation probability, etc. I changed the latitude and longitude of the API call so that I would get back the weather information about Stony Brook. I created a few variables to store the information such as precipitation and temperature. I would later use these variables in a formatted string to construct the tweet. I also downloaded a few .jpg files that would be uploaded if the right conditions were met. I had the bot tweet out the current weather summary, temperature, as well as the chances of precipitation. If the chance was equal to 100%, meaning that it was raining, the bot would format a string with the current weather information and also send a .jpg file of Ollie saying \'93It\'92s raining sideways!\'94 using the send_media_tweet function. If the chances of precipitation was in the range of 50%-99%, the bot would send the same weather information, but a different image file showing Ollie saying \'93It\'92s gon rain!\'94 And if the chances were less then 50%, it would simply tweet the current weather with no input from Ollie. For the most part, the bot does what it was designed to do, and it does it well. I am satisfied with the outcome.\
\
I enjoyed making this Twitter Bot. I learned some new things along the way, such as interacting with an API other than Twitter\'92s. While experimenting with how I wanted to get the weather information, I learned about using the requests module and BeautifulSoup module to scrape data off of websites. I think I want to go on to make my own Twitter bot and implement some of the things I learned through making this bot.  }